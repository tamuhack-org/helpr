// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL") // uses connection pooling
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

model Event {
  id          String   @id @default(cuid())
  isDisabled  Boolean
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
}

model Ticket {
  id           String    @id @default(cuid())
  authorName   String
  issue        String
  location     String
  contact      String
  isResolved   Boolean   @default(false)
  resolvedTime DateTime?
  isClaimed    Boolean   @default(false)
  claimedTime  DateTime?
  claimant     User?     @relation(name: "claimant", fields: [claimantId], references: [id])
  claimantId   String?   @unique
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @unique
  updatedTime  DateTime  @updatedAt

  publishTime DateTime @default(now())

  @@index(fields: [isResolved])
  @@index(fields: [isClaimed])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  admin           Boolean   @default(false)
  mentor          Boolean   @default(false)
  claimedTicket   Ticket?   @relation(name: "claimant")
  claimedTicketId String?
  ticket          Ticket?
  accounts        Account[]
  sessions        Session[]
  updatedTime     DateTime  @updatedAt

  @@index([admin])
  @@index([mentor])
  @@index([claimedTicketId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
